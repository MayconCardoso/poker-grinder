apply plugin: 'jacoco'

jacoco {
    toolVersion = rootProject.ext.JACOCO_VERSION
}

afterEvaluate { project ->
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses true
        jacoco.excludes = ['jdk.internal.*']
    }

    task jacocoTestReport(
            type: JacocoReport,
            dependsOn: ['test']
    ) {
        reports {
            csv.enabled false
            xml.enabled true
            html {
                enabled true
                destination file("${buildDir}/coverage-report-jacoco")
            }
        }
        def fileFilter = [
                '**/*App.*',
                '**/*Application.*',
                '**/*Activity.*',
                '**/*Fragment.*',
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                '**/di/**',
                '**/*Dagger.*',
        ]
        def debugTreeDebug = fileTree(
                dir: "$buildDir/tmp/kotlin-classes/debug",
                excludes: fileFilter
        )
        def mainSrc = "$projectDir/src/main/java"
        def kotlinMainSrc = "$projectDir/src/main/kotlin"
        sourceDirectories.from = files([mainSrc, kotlinMainSrc])
        classDirectories.from = files([debugTreeDebug])
        executionData.from = fileTree(
                dir: project.buildDir,
                includes: [
                        'jacoco/testDebugUnitTest.exec',
                        'jacoco/testUnfoldDebugUnitTest.exec',
                        'outputs/code-coverage/connected/*coverage.ec'
                ]
        )
    }
}
